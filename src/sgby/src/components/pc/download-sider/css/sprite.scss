// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$btn-android-h-name: 'btn-android-h';
$btn-android-h-x: 302px;
$btn-android-h-y: 0px;
$btn-android-h-offset-x: -302px;
$btn-android-h-offset-y: 0px;
$btn-android-h-width: 241px;
$btn-android-h-height: 73px;
$btn-android-h-total-width: 543px;
$btn-android-h-total-height: 469px;
$btn-android-h-image: './img/sprite_download_sider.png';
$btn-android-h: (302px, 0px, -302px, 0px, 241px, 73px, 543px, 469px, './img/sprite_download_sider.png', 'btn-android-h', );
$btn-android-name: 'btn-android';
$btn-android-x: 302px;
$btn-android-y: 83px;
$btn-android-offset-x: -302px;
$btn-android-offset-y: -83px;
$btn-android-width: 241px;
$btn-android-height: 73px;
$btn-android-total-width: 543px;
$btn-android-total-height: 469px;
$btn-android-image: './img/sprite_download_sider.png';
$btn-android: (302px, 83px, -302px, -83px, 241px, 73px, 543px, 469px, './img/sprite_download_sider.png', 'btn-android', );
$btn-ios-h-name: 'btn-ios-h';
$btn-ios-h-x: 302px;
$btn-ios-h-y: 166px;
$btn-ios-h-offset-x: -302px;
$btn-ios-h-offset-y: -166px;
$btn-ios-h-width: 241px;
$btn-ios-h-height: 73px;
$btn-ios-h-total-width: 543px;
$btn-ios-h-total-height: 469px;
$btn-ios-h-image: './img/sprite_download_sider.png';
$btn-ios-h: (302px, 166px, -302px, -166px, 241px, 73px, 543px, 469px, './img/sprite_download_sider.png', 'btn-ios-h', );
$btn-ios-name: 'btn-ios';
$btn-ios-x: 302px;
$btn-ios-y: 249px;
$btn-ios-offset-x: -302px;
$btn-ios-offset-y: -249px;
$btn-ios-width: 241px;
$btn-ios-height: 73px;
$btn-ios-total-width: 543px;
$btn-ios-total-height: 469px;
$btn-ios-image: './img/sprite_download_sider.png';
$btn-ios: (302px, 249px, -302px, -249px, 241px, 73px, 543px, 469px, './img/sprite_download_sider.png', 'btn-ios', );
$sider-bg-name: 'sider-bg';
$sider-bg-x: 0px;
$sider-bg-y: 0px;
$sider-bg-offset-x: 0px;
$sider-bg-offset-y: 0px;
$sider-bg-width: 292px;
$sider-bg-height: 469px;
$sider-bg-total-width: 543px;
$sider-bg-total-height: 469px;
$sider-bg-image: './img/sprite_download_sider.png';
$sider-bg: (0px, 0px, 0px, 0px, 292px, 469px, 543px, 469px, './img/sprite_download_sider.png', 'sider-bg', );
$spritesheet-width: 543px;
$spritesheet-height: 469px;
$spritesheet-image: './img/sprite_download_sider.png';
$spritesheet-sprites: ($btn-android-h, $btn-android, $btn-ios-h, $btn-ios, $sider-bg, );
$spritesheet: (543px, 469px, './img/sprite_download_sider.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
